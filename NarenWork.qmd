---
title: "NarenWork"
author: "Naren Prakash"
format: pdf
editor: visual
---

```{r}
library(tidyverse)
library(tidytext)
library(stringr)
library(pdftools)
library(syuzhet)
library(textdata)
library(readtext)
library(tm)
library(quanteda)
library(Rgraphviz)
library(topicmodels)
library(gridExtra)
```

```{r}
library(doParallel)
ncores <- detectCores()
clus <- makeCluster(ncores - 1)
registerDoParallel(clus)
```

```{r}
movies <- read_csv("movie_texts_tf_idf.csv")
```

## LDA

```{r}
movies <- movies %>% filter(!(word %in% c("gestur", c("offscreen"), c("cut"), c("continu"), c("page"), c("walk"), c("camera"))))

mov <- movies %>% cast_dtm(title, word, n)
mov_LDA <- LDA(mov, k = 4, control = list(seed = 133))

topics <- tidy(mov_LDA, matrix = "beta")

topterms <- topics %>%
  group_by(topic) %>%
  top_n(10, beta) %>%
  ungroup() %>%
  arrange(topic, -beta)
topterms %>%
  mutate(term = reorder_within(term, beta, topic)) %>%
  ggplot(aes(term,
    beta,
    fill = factor(topic)
  )) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~topic,
    scales =
      "free"
  ) +
  coord_flip() +
  scale_x_reordered() +
  theme_minimal() +
  ggtitle("10 most frequent terms by LDA topic group") +
  scale_fill_brewer(palette = "Pastel2")
```

```{r}
titleandyear <- movies %>%
  mutate(document = title) %>%
  select(c(document, decade))
docs <- tidy(mov_LDA, matrix = "gamma")
docs <- docs %>% inner_join(titleandyear)
docs$decade <- as.factor(docs$decade)
docs %>%
  mutate(document = reorder(document, gamma)) %>%
  ggplot(aes(factor(topic), gamma, fill = as.factor(topic))) +
  geom_boxplot() +
  facet_wrap(~decade) +
  xlab("Topic") +
  scale_fill_brewer(palette = "Pastel1") +
  theme_minimal() +
  labs(fill = "Topic colors") +
  ggtitle("Box plots of gamma value by topics")
```

## Classification model

```{r}
texts <- read_csv("cleaned_text_decade.csv") %>% select(title, decade, text)
texts$text <- gsub(pattern = "[[:punct:]]", replacement = "", texts$text)
corp <- Corpus(VectorSource(texts$text))
corp <- tm_map(corp, removePunctuation)
dtm <- DocumentTermMatrix(corp)
dtm <- removeSparseTerms(dtm, 0.96)
```

```{r}
data <- as.data.frame(as.matrix(dtm))
data$decade <- as.factor(texts$decade)
colnames(data) <- make.names(colnames(data))

print(table(data$decade))
prop.table(table(data$decade))
```

```{r}
library(randomForest)
set.seed(133)

num <- floor(0.7 * nrow(data))

train_ind <- sample(seq_len(nrow(data)), size = num)
train <- data[train_ind, ]
test <- data[-train_ind, ]

print(dim(train))
print(dim(test))
```

```{r}
model <- randomForest(decade ~ ., train)
predictions <- predict(model, newdata = test)
trainp <- predict(model, newdata = train)
```

### Train confusion

```{r}
library(caret)

train_conf <- confusionMatrix(train$decade, trainp)
train_conf
```

### Test confusion

```{r}
test_conf <- confusionMatrix(test$decade, predictions)
test_conf
```

## Confusion Matrix Plots

```{r}
library(yardstick)

tr_c <- conf_mat(as.matrix(train_conf))
autoplot(tr_c, type = "heatmap") + scale_fill_gradient(low = "lavender", high = "purple") + ggtitle("Train set confusion matrix")
```

```{r}
t_c <- conf_mat(as.matrix(test_conf))
autoplot(t_c, type = "heatmap") + scale_fill_gradient(low = "lightblue", high = "blue") + ggtitle("Test set confusion matrix")
```

## Finding actual topic divisions (not just looking for decade based topic divisions)

```{r}
library(ldatuning)

k_values <- seq(2, 15)

results <- FindTopicsNumber(
  mov,
  topics = k_values,
  metrics = c("Griffiths2004", "CaoJuan2009"),
  method = "Gibbs",
  control = list(seed = 133)
)

FindTopicsNumber_plot(results)
```

Our elbow methods tell us that k=6 is likely the best interpretable division.

```{r}
mov_LDA <- LDA(mov, k = 6, control = list(seed = 133))

topics <- tidy(mov_LDA, matrix = "beta")

topterms <- topics %>%
  group_by(topic) %>%
  top_n(10, beta) %>%
  ungroup() %>%
  arrange(topic, -beta)
topterms %>%
  mutate(term = reorder_within(term, beta, topic)) %>%
  ggplot(aes(term,
    beta,
    fill = factor(topic)
  )) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~topic,
    scales =
      "free"
  ) +
  coord_flip() +
  scale_x_reordered() +
  theme_minimal() +
  ggtitle("10 most frequent terms by LDA topic group") +
  scale_fill_brewer(palette = "Pastel2")
```

```{r}
top_samp <- topics %>%
  group_by(topic) %>%
  top_n(25, beta) %>%
  ungroup() %>%
  arrange(topic, -beta)


word_list <- top_samp %>%
  group_by(topic) %>%
  summarize(terms = paste(term, collapse = ", "), .groups = "drop")
print(word_list)
```

```{r}
chatgpt_topics <- c("Golf Game", "Social Gathering", "Emotional Conversation", "Home Interaction", "Everyday Moments", "Christmas Reflection")

word_list$labels <- chatgpt_topics

docs <- tidy(mov_LDA, matrix = "gamma")
docs <- docs %>% inner_join(word_list)
docs$labels <- as.factor(docs$labels)
library(plotly)
z <- docs %>%
  mutate(document = reorder(document, gamma)) %>%
  ggplot(aes(factor(labels), gamma, fill = as.factor(labels))) +
  geom_boxplot() +
  facet_wrap(~topic) +
  xlab("Topic labels") +
  scale_fill_brewer(palette = "Pastel1") +
  theme_minimal() +
  labs(fill = "Topic colors") +
  ggtitle("Box plots of gamma value by topics") +
  coord_flip()
ggplotly(z)
```

```{r}
library(dplyr)
library(ggplot2)
library(plotly)

# Prepare the data
docs <- tidy(mov_LDA, matrix = "gamma") %>%
  inner_join(word_list) %>%
  mutate(labels = as.factor(labels))

# Get unique topics
topics <- unique(docs$topic)

# Create a custom color palette for each topic
custom_colors <- RColorBrewer::brewer.pal(length(topics), "Set3")

# Create a list to store plots
plot_list <- lapply(seq_along(topics), function(i) {
  t <- topics[i]
  docs_topic <- docs %>% filter(topic == t)

  ggplot(docs_topic, aes(factor(labels), gamma, fill = as.factor(labels))) +
    geom_boxplot() +
    xlab("Topic label") +
    scale_fill_manual(values = custom_colors[i]) + # Use the custom color for the specific topic
    theme_minimal() +
    labs(fill = "Topic colors") +
    ggtitle(paste("Box plots of gamma value for topic:", word_list$labels[t])) +
    coord_flip()
})

# Convert each plot to plotly and store in a list
plotly_list <- lapply(plot_list, ggplotly)

# If you want to display them, you can loop through the plotly_list
for (i in seq_along(plotly_list)) {
  print(plotly_list[[i]])
}
```
